type: edu
custom_name: stage8
files:
- name: src/calculator/Main.kt
  visible: true
  text: |
    package calculator

    fun main() {
        println("Hello, World!")
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = 32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = 2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c  ").trim();
                    if (!output.equals("2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 13 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process " +
                            "multiple operations with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // test suit for the 8th stage with very large numbers
                    main.start();

                    // testing basic assignment
                    String output = main.execute("n = 32000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute(
                        "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                        "49000000000000000000 - n - 9000000000000000000 " +
                        "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                    if (!output.equals("-2999999999999999999")) {
                        return CheckResult.wrong(
                            "The program cannot process addition " +
                            "and subtraction operations correctly.");
                    }

                    // testing reassignment with big values
                    output = main.execute("c = n \nc = 2000000000000000000000");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("2000000000000000000000")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute(
                        "11000000000000000000 - 9000000000000000000 - " +
                        "c + 1998000000000000000000").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute(
                        "5000000000000000000 --- 2000000000000000000 " +
                        "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                    if (!output.equals("10000000000000000000")) {
                        return CheckResult.wrong("The program cannot process multiple " +
                            "operations with several operators.");
                    }

                    // testing all operators, with variables
                    main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                    output = main.execute("a * 4000000000000000000 / " +
                        "b - (3000000000000000000 - 1000000000000000000)").trim();
                    if (!output.equals("12000000000000000000")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })

            );
        }
    }
  learner_created: false
- name: src/calculator/InfixToPostfix.kt
  visible: true
  text: |
    package calculator

    fun priority(token: Token): Int = when (token) {
        Token.Plus, Token.Minus -> 1
        Token.Multiply, Token.Divide -> 2
        Token.Power -> 3
        else -> 0
    }

    fun infixToPostfix(input: List<Token>): List<Token> {
        val output = mutableListOf<Token>()
        val stack: Stack<Token> = StackImpl()
        stack.push(Token.None)
        for (t in input) {
            when (t) {
                is Token.Variable, is Token.Number -> output.add(t)
                is Token.BracketOpen -> stack.push(t)
                is Token.Power -> stack.push(t)
                is Token.BracketClose -> {
                    while (stack.top() != Token.None && stack.top() != Token.BracketOpen) {
                        output.add(stack.pop())
                    }
                    stack.pop()
                }
                else -> {
                    if (priority(t) > priority(stack.top())) {
                        stack.push(t)
                    } else {
                        while (stack.top() != Token.None && priority(t) <= priority(stack.top())) {
                            output.add(stack.pop())
                        }
                        stack.push(t)
                    }
                }
            }
        }

        while (stack.top() != Token.None) {
            output.add(stack.pop())
        }

        return output
    }
  learner_created: true
- name: src/calculator/Evaluator.kt
  visible: true
  text: |
    package calculator

    import kotlin.math.pow

    fun evaluateExpression(input: List<Token>, symbolTable: Map<String, Int>): Int {
        val stack: Stack<Int> = StackImpl()
        stack.push(0)
        for (t in input) {
            when (t) {
                is Token.Variable -> {
                    symbolTable[t.value]?.let { stack.push(it) } ?: throw Exception("Unknown variable")
                }
                is Token.Number -> {
                    stack.push(t.value)
                }
                is Token.Minus -> {
                    val right = stack.pop()
                    val left = stack.pop()
                    stack.push(left - right)
                }
                is Token.Plus -> {
                    val right = stack.pop()
                    val left = stack.pop()
                    stack.push(left + right)
                }
                is Token.Multiply -> {
                    val right = stack.pop()
                    val left = stack.pop()
                    stack.push(left * right)
                }
                is Token.Divide -> {
                    val right = stack.pop()
                    val left = stack.pop()
                    stack.push(left / right)
                }
                is Token.Power -> {
                    val right = stack.pop()
                    val left = stack.pop()
                    stack.push(left.toDouble().pow(right.toDouble()).toInt())
                }
                else -> throw Exception("Unexpected token: $t")
            }
        }
        return stack.top()
    }
  learner_created: true
- name: src/calculator/Assignment.kt
  visible: true
  text: |
    package calculator

    class Assignment {
        companion object {
            val regex = "^\\s*(?<left>[a-zA-Z]+)\\s*=\\s*(?<right>-?([a-zA-Z]+|\\d+))\\s*$".toRegex()
        }
    }
  learner_created: true
- name: src/calculator/Stack.kt
  visible: true
  text: |
    package calculator

    interface Stack<E> {
        fun empty(): Boolean
        fun top(): E
        fun pop(): E
        fun push(item: E)
    }
  learner_created: true
- name: src/calculator/Token.kt
  visible: true
  text: |
    package calculator

    sealed interface Token {
        class Number(val value: Int) : Token {
            override fun toString() = value.toString()
        }

        class Variable(val value: String) : Token {
            override fun toString() = value
        }

        object Multiply : Token {
            override fun toString() = "*"
        }

        object Divide : Token {
            override fun toString() = "*"
        }

        object Plus : Token {
            override fun toString() = "+"
        }

        object Minus : Token {
            override fun toString() = "-"
        }

        object BracketOpen : Token {
            override fun toString() = "("
        }

        object BracketClose : Token {
            override fun toString() = ")"
        }

        object Power : Token {
            override fun toString() = "^"
        }

        object None : Token
    }
  learner_created: true
- name: src/calculator/StackImpl.kt
  visible: true
  text: |
    package calculator

    /**
     * Stack implementation based on ArrayDeque
     * https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-deque/
     */
    class StackImpl<E> : Stack<E> {
        private val storage: ArrayDeque<E> = ArrayDeque()
        override fun empty(): Boolean = storage.isEmpty()
        override fun top(): E = storage.last()
        override fun pop(): E = storage.removeLast()
        override fun push(item: E) = storage.addLast(item)
    }
  learner_created: true
- name: src/calculator/Extensions.kt
  visible: true
  text: |
    package calculator

    fun String.isVariable() = "[a-zA-Z]+".toRegex().matches(this)

    fun String.isNumber() = "\\d+".toRegex().matches(this)

    fun String.isAssignment() = Assignment.regex.matchEntire(this)?.let { true } ?: false
  learner_created: true
- name: src/calculator/Tokenizer.kt
  visible: true
  text: |
    package calculator

    fun parse(input: String): List<Token> {
        val tokens = mutableListOf<Token>()
        var index = 0
        while (index <= input.lastIndex) {
            val ch = input[index]
            if (ch.isWhitespace()) {
                index++
                continue
            }
            if (ch.isLetterOrDigit()) {
                var value = "$ch"

                while ((++index <= input.lastIndex) && input[index].isLetterOrDigit()) {
                    value += input[index]
                }
                when {
                    value.isVariable() -> tokens.add(Token.Variable(value))
                    value.isNumber() -> tokens.add(Token.Number(value.toInt()))
                    else -> throw Exception("Invalid expression")
                }
                continue
            }
            tokens.add(
                when (ch) {
                    '-' -> Token.Minus
                    '+' -> Token.Plus
                    '*' -> Token.Multiply
                    '/' -> Token.Divide
                    '(' -> Token.BracketOpen
                    ')' -> Token.BracketClose
                    '^' -> Token.Power
                    else -> throw Exception("Invalid expression")
                }
            )
            index++
        }
        return tokens
    }

    fun normalize(input: String): String {
        var i = input
        i = i.replace("\\s+".toRegex(), "")
        if (input.count { it == '(' } != input.count { it == ')' }) {
            throw Exception("Invalid expression")
        }
        return i
    }

    fun compact(tokens: List<Token>): List<Token> {
        val output = mutableListOf<Token>()
        var m = 0
        var p = 0
        for (t in tokens) {
            if (t == Token.Minus) {
                m++
                continue
            }
            if (t == Token.Plus) {
                p++
                continue
            }
            if (p > 0 || m > 0) {
                if (m % 2 == 1) {
                    output.add(Token.Minus)
                } else {
                    output.add(Token.Plus)
                }
                p = 0
                m = 0
            }
            output.add(t)
        }
        return output
    }

    fun lex(tokens: List<Token>) {
        when (tokens.first()) {
            is Token.Variable, is Token.Number,
            is Token.BracketOpen,
            is Token.Minus, is Token.Plus -> {
            }
            else -> throw Exception("Invalid expression")
        }

        var index = 0
        while (++index < tokens.size) {
            val left = tokens[index - 1]
            val right = tokens[index]
            when (left) {
                is Token.Variable -> {
                    when (right) {
                        is Token.BracketOpen, is Token.BracketClose,
                        is Token.Minus, is Token.Plus,
                        is Token.Divide, is Token.Multiply,
                        is Token.Power -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.Number -> {
                    when (right) {
                        is Token.BracketOpen, is Token.BracketClose,
                        is Token.Minus, is Token.Plus,
                        is Token.Divide, is Token.Multiply,
                        is Token.Power -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.BracketOpen -> {
                    when (right) {
                        is Token.Variable, is Token.Number,
                        is Token.BracketOpen, is Token.BracketClose,
                        is Token.Minus, is Token.Plus -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.BracketClose -> {
                    when (right) {
                        is Token.BracketClose,
                        is Token.Minus, is Token.Plus,
                        is Token.Divide, is Token.Multiply,
                        is Token.Power -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.Minus -> {
                    when (right) {
                        is Token.Variable, is Token.Number,
                        is Token.BracketOpen -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.Plus -> {
                    when (right) {
                        is Token.Variable, is Token.Number,
                        is Token.BracketOpen -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.Divide -> {
                    when (right) {
                        is Token.Variable, is Token.Number,
                        is Token.BracketOpen -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.Multiply -> {
                    when (right) {
                        is Token.Variable, is Token.Number,
                        is Token.BracketOpen -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
                is Token.Power -> {
                    when (right) {
                        is Token.Variable, is Token.Number,
                        is Token.BracketOpen -> {
                            continue
                        }
                        else -> throw Exception("Invalid expression")
                    }
                }
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/88/stages/493/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Mon, 01 Nov 2021 12:12:21 UTC
record: -1
